<?xml version="1.0" encoding="utf-8"?>
<scale xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="300"
    android:fillAfter="true"
    android:fromXScale="0.0"
    android:fromYScale="0.0"
    android:interpolator="@android:anim/accelerate_decelerate_interpolator"
    android:toXScale="1.0"
    android:toYScale="1.0" />


    <!--
    http://www.journaldev.com/9481/android-animation-example

    android:interpolator : It is the rate of change in animation. We can define our own interpolators using the time as the constraint. In the above xml code an inbuilt interpolator is assigned
    android:duration : Duration of the animation in which the animation should complete. It is 300ms here. This is generally the ideal duration to show the transition on the screen.
    The start and end of the animation are set using:

    android:fromTRANSFORMATION
    android:toTRANSFORMATION
    TRANSFORMATION : is the transformation that we want to specify. In our case we start with an x and y scale of 0 and end with an x and y scale of 1
    android:fillAfter : property specifies whether the view should be visible or hidden at the end of the animation. Weâ€™ve set it visible in the above code. If it sets to false, the element changes to its previous state after the animation
    android:startOffset : It is the waiting time before an animation starts. This property is mainly used to perform multiple animations in a sequential manner
    android:repeatMode : This is useful when you want the animation to be repeat
    android:repeatCount : This defines number of repetitions on animation. If we set this value to infinite then animation will repeat infinite times
    -->